services:
  # Laravel API (PHP-FPM)
  api:
    build: ./backend
    container_name: laravel-api
    restart: unless-stopped
    working_dir: /var/www
    user: "1000:1000"
    volumes:
      - ./backend:/var/www:cached
      - /var/www/vendor
    depends_on:
      - postgres
      - redis
    environment:
      - WWWUSER=${WWWUSER:-1000}
      - WWWGROUP=${WWWGROUP:-1000}
      - LOG_CHANNEL=${LOG_CHANNEL}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_ENV=${APP_ENV}
      - DB_CONNECTION=pgsql
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./backend:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 128M

  # Next.js Frontend
  web:
    build: ./frontend
    container_name: nextjs-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - api
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 768M

  # PostgreSQL Database
  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 128M

  # RabbitMQ Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M

  queue:
    build: ./backend
    container_name: laravel-queue
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./backend:/var/www
      - /var/www/vendor
    depends_on:
      - postgres
      - redis
      - rabbitmq
    command: php artisan queue:work rabbitmq --queue=notifications --verbose --tries=3 --timeout=90
    environment:
      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - LOG_CHANNEL=${LOG_CHANNEL}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_ENV=${APP_ENV}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M      

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms256m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 768M


  #kibana:
    #image: docker.elastic.co/kibana/kibana:8.8.0
    #container_name: kibana
    #restart: unless-stopped
    #ports:
      #- "5601:5601"
    #environment:
      #- ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      #- XPACK_SECURITY_ENABLED=false
    #depends_on:
      #- elasticsearch
    #networks:
      #- app-network
    #deploy:
      #resources:
        #limits:
          #cpus: "0.50"
          #memory: 256M

volumes:
  pgdata:
  redis_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge
